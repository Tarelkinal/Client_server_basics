from MongoDB_hw3 import parser

# пример 1

# создаем объект класса

vacancy = parser.VacancyParser('физик')

# результат парсинга в виде списка хранитсья в атрибуте .vacancy_list
# парсинг выполняется при инициализации класса

print(vacancy.vacancy_list)


# так как название вакансии передано на русском языке, то в атрибуте .collection_name лежит перевод на английский
# мб, это и не нужно и можно работать с русскими названиями коллекций (по крайней мерe, mongo позволяет их создать)

print(vacancy.collection_name)

# создается коллекция с именем vacancy.collection_name, и наполняется данными из vacancy.vacancy_list

vacancy.insert_data_into_db()


# пример 2

vacancy = parser.VacancyParser('CEO')

# можно перезадать в ручную название коллекции, в которую планируется вставлять данные (по дефолту было бы 'СEO')

vacancy.collection_name = 'CEO_db'

# Добавлят новые вакансии в коллекцию, если коллекция с именем vacancy.collection_name существует,
# а если нет, то создает новую коллекцию и добаляет в нее все вакансии

vacancy.add_new_data_into_db()


# пример 3

# создаем объект класса без указания ключевых слов - парсинга не выполняется

vacancy = parser.VacancyParser()

# при вызове функции наполнения бд, выводится информация: "нет данных для вставки"

vacancy.insert_data_into_db()
vacancy.add_new_data_into_db()

# в этом "режиме" можно работать с бд, когда не требудется парсинг, например, можно вызвать метод фильтрации по зп
# метод .vacancy_salary_gt производит поиск и выводит на экран вакансии с заработной платой больше введенной суммы
# можно также указать валюту (по умолчанию валюта - рубли)
# перед вызовом метода, необходимо задать имя коллекции, иначе выводится информация: "коллекция не определена"

vacancy.collection_name = 'physicist'

for x in vacancy.vacancy_salary_gt(1000, 'USD'):
    print(x)
